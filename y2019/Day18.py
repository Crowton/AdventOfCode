w, h = 81, 81

maze = [[s for s in input()] for _ in range(h)]
numKeys = sum(1 for x in range(w) for y in range(h) if "a" <= maze[y][x] <= "z")

# maze = "#################################################################################\n" + \
#        "#l....#.........#.....#.....#...........#...........#.......#...#...............#\n" + \
#        "#.#.###.#####.#.#####.#.###.#.###.#####.#.#.#########.#####.#.#.#.#####.#.#######\n" + \
#        "#.#.....#.#...#i......#.#...#.Z.#.....#.#.#e......A...#...#.#.#..q#...#.#.#.....#\n" + \
#        "#.#####.#.#.###########.#.###.#######.###.#########.#####.#.#.#####.#.#.###.###.#\n" + \
#        "#.#...#.#.#.....#...#...#.....#.....#...#...#.....#.......#.#...#...#.#.#.....#.#\n" + \
#        "#.#.#.#.#.#####.#.#.#.#########.###.###.#.###.###.#######.#.#.###.###.#.#.#####F#\n" + \
#        "#.#.#.#.......#...#.#.#.#.......#.....#.#.#...#.#...#.....#.#.#...#.#...#u..#...#\n" + \
#        "#.#.#.#############.#.#.#.###########.#.###.###.###.###.###.#.#.###.###.###.#.#.#\n" + \
#        "#.#.#...............#.#.#.....#...#...#.#...#.....#...#.#.#...#.#.........#.#.#.#\n" + \
#        "#.#.###############.#.#.#####.#.#.###.#.#.###.#######.#.#.#####.#####.#####.#.###\n" + \
#        "#.#...#.......#.#...#...#...#...#...#.#.#...#.#...#...#.#.N...#.....#...#...#...#\n" + \
#        "#####.#.#####.#.#.#####.###.#####.#.#.#.###.#.#.#.#.###.#.#.#######.###.#.#####.#\n" + \
#        "#.....#.#.....#.#...#.......#...#.#.#.#.#...#...#.#.#...#.#...#...#...#.#.#.#...#\n" + \
#        "#.#####.#.#####T###.#.#######.#.###.#.#.#.###.###.#.###.#.###.#.#.###.###.#.#.#.#\n" + \
#        "#.......#.#.........#...#.....#.....#.#.#...#.#...#...#.#..x#...#.#...#...#.#.#.#\n" + \
#        "#.#######.###########.###.###########.#.###.###.#.###.#.#########.#.###.###.#.#.#\n" + \
#        "#.#...#...#.......#...#...#.......#...#d#.#.#...#...#.#...#.......#.........#.#.#\n" + \
#        "#.###.#.###.#####.#.###.###.#####.#.###.#.#.#.#####.#.###.#.###.#######.#####J#.#\n" + \
#        "#.....#g..#.#...#.#...#.#.#...#...#...#.#.#...#...#.#.#.....#.S.#.....#.#.....#.#\n" + \
#        "#####.###.#.###.#.#.###.#.#.#.#.#####.#.#.#####.###.#.###.#####.#.###.###.#######\n" + \
#        "#.......#.......#.#.#...#.#.#.#...#...#.#...#.......#...#.#...#.#...#...#.......#\n" + \
#        "#############.###.#.#####.#.#.###.#.###.###.#.#########.###.#######.###.#.#####.#\n" + \
#        "#.........#...#...#.....#.#.#.#.#.#.#...#...#.#...#...#...#.........#...#.#.#...#\n" + \
#        "#.#######.###.#.#######.#.#.#.#.#.#.#.#B#.###.#.#.#.#.###.###########.###.#.#.#.#\n" + \
#        "#.#.....#...#.#.......#.#.#.#.#...#.#.#.#.....#.#.#.#...#...........#.#...#.#.#.#\n" + \
#        "#.###.#.###.#######.#.#.#.#.#.#.###.###.#.#####.#.#.#.#.#########.#.#.#.###.#.###\n" + \
#        "#...#.#...#...#...#.#...#...#.#.#...#...#.#.....#...#.#.#.....#.#.#.#.#.....#...#\n" + \
#        "###.#.#.#####.#.#.#.#####.###.#.#.###.###.###########.#.###.#.#.#.#.#G#########.#\n" + \
#        "#...#.#.#...#...#.#...#...#...#.#.#.....#.#.........#.#.....#.#.#.#.#.....#.....#\n" + \
#        "#.###.#.#.#.#####.###.#####.#.###.#.###.#.#.#######.#.#######.#.#.#######.#.###.#\n" + \
#        "#.#...#...#.....#...#.......#.#...#.#...#.#.#...#.#.#.....#.#.#.#.......#.#...#.#\n" + \
#        "#.#########.#.#.###.###.#######.###.#.#.#.#.#.#.#.#.###.#.#.#.#.#######.#.#.#.###\n" + \
#        "#.#.......#.#.#.#.#.#...#.......#...#.#.#.#...#.#.#...#.#.#.#.....#.#...#.#.#...#\n" + \
#        "#.#.#####.###.#.#.#.#####.###########.#.#.#.###.#.###.#.#.#.#####.#.#.###.#.###P#\n" + \
#        "#.#...#.#.....#.#.#...#...#...........#.#.#...#.#...#.#.#.#.......#.#.....#.#...#\n" + \
#        "#.###.#.#######.#.###.#.#########.#####.#.#####.#.#.#.###.#.#######.#########.#.#\n" + \
#        "#...#.#...#.....#...#...#.......#...#...#...#...#.#.#.#...#...#...#...#.......#.#\n" + \
#        "###.#.#.###.#####.#.#####.#####.###.#.#####.#.###.###.#.#####.#.#.#.#.###.#####.#\n" + \
#        "#w....#...........#.......#.........#.........#.........#.......#...#.....#.....#\n" + \
#        "#######################################.@.#######################################\n" + \
#        "#...........#...K...#.......#.......#.....#.....#.........#.......#.............#\n" + \
#        "#.#######.###.#.#####.#####.#.###.###.#.#.#.#.###.#####.###.#.#.###.###########.#\n" + \
#        "#p......#.#...#.......#...#.#...#.#...#.#...#.........#.....#.#.#...#.........#.#\n" + \
#        "#######.#.#.###########.#.#.###.#.#.###.#.###################.###.###.#.###.###.#\n" + \
#        "#y....#.#...#.#.......#.#.#...#.#...#.#.#...#...#.#.........#.....#...#...#.#...#\n" + \
#        "#.#.###.#####.#.###.#.#.#.#.#.#.#####.#.###.#.#.#.#.#######.#.#####.#####.###.#.#\n" + \
#        "#.#.#...#...#...#...#.#h#...#.#...#...#.#.#.#.#.#.#.#...#...#.....#.#...#.#...#.#\n" + \
#        "#.#.#.###.#.#.###.#####.###.#####.#.###.#.#.#.#.#.#.#.#.###.#####.###.#.#.#.###.#\n" + \
#        "#.#.#.....#.#...#...#...#...#...#...#...#.#.#.#...#.#.#...#.....#.#...#...#.#...#\n" + \
#        "#M#.#######.###.###.#.###.###.#.#.###.###.#.#.###.#.#.###.#####.#.#.#####.#.#####\n" + \
#        "#.#.#.....#.#...#...#...#...#.#...#...#.#b..#...#.#...#z#.#.....#...#...#.#.....#\n" + \
#        "#.###.#.#.#.#####.#####.#####.#####.###.#.###.#.#######.#.#####.#####.###.#####.#\n" + \
#        "#...#.#.#.#.....#.....#.#...#.#.....#...#.#...#.........#.....#.#.#.........#...#\n" + \
#        "###.#.#.#.#####.###.#.#.#.#.#.#.#####.#.#.#####.#######.#####.#.#.#.#######.#.#.#\n" + \
#        "#...#.#.#.....#.....#.#...#...#...#...#.#.#...#.......#.....#.#.#...#...#...#.#.#\n" + \
#        "#.###O#.#####.#######.#######D###.#.###.#.#.#.###########.#.#.#.#####.#.#####H#.#\n" + \
#        "#.#...#.#.........#.....#...#...#.#...#.#...#.............#.#.#.......#.#...#.#.#\n" + \
#        "#.#.###.###########.#####.#.#####.###.#.###.#############.###.#########.#.#.#.#.#\n" + \
#        "#.#.#.#.#...#.......#.....#.......#...#.#...#.....#.......#...#.....#.....#...#k#\n" + \
#        "#.#.#.#.#.#.#.#######.#############.#####.###.###.#########.###.###.###########.#\n" + \
#        "#...#.#...#.#f#.....#.#.......#...#.....#.#...#.#.......#...#...#.#...#.....#.#.#\n" + \
#        "#.###.#####.#.#####.###.#####.#.#.#####.###.###.#######.#.#######.###.#.###.#.#.#\n" + \
#        "#.#...#..r..#.....#.....#.....#.#.......#...#.....#...#...#.........#...#...#.#.#\n" + \
#        "#.###.#V###.#####.#.#####.#####.#######.#.#######.#.#.###.#.#######.#####.###.#.#\n" + \
#        "#.#...#...#.....#...#...#...#...#.....#.#.#.....#.#.#.....#.....#.....#...#.....#\n" + \
#        "#.#.#####.#####.#####.#.###.###.#.#####.#.#.###.#.#.###########.#.###.#E###.#####\n" + \
#        "#m#.#.....#.#.....R...#..o#.#...#.#...#.#.#.#...#...#.........#.#.#.#.#.#.#...#.#\n" + \
#        "#.#.#.#####.#.###########.#.#.###.#.#.#.#.#.#.#######.#######.#.#.#.#.#.#.###.#.#\n" + \
#        "#...#.#.......#.....#...#.#.#.#.#...#.#.#...#.........#...#.#.#.#.#...#.#...#.#.#\n" + \
#        "#.###.#######.#.###.###.#.#.#.#.#.###.#.###############.#.#.#.#.#.#####.###.#.#.#\n" + \
#        "#.#...#.....#.#...#...#...#.#.#...#...#.#.........#.....#...#.I.#.#.Q.#...#.#...#\n" + \
#        "#.#.###.###.#####.###.#####.#.#.###.###.#.###.#####.###.###.#####.#.#.###.#.###.#\n" + \
#        "#.#v#...#.#.....#n..#.#...#.#.#...#.L...#...#.#.....#.#.#..j....#...#.#...#...#.#\n" + \
#        "#.#.#X###.#####.###.#.#.#.#.#.###.#########.#.#.#####.#.#.###########.#.###.#.#.#\n" + \
#        "#.#...#...Y.#.#.....#s#.#.#...#.#...#...#.#.#...#.....#.#...#.........#...#.#...#\n" + \
#        "#.#####.###.#.#######.#.#.#####.###.###.#.#.#####.###.#.#####.###########.#.#####\n" + \
#        "#.#.......#.#.....#.#.#.#.#.......#...#.#...#.....#.#.#.....#..a..........#.W...#\n" + \
#        "#.#######.#.###.#C#.#.#.#.#.###.#####.#.#.###.#####.#U#####.###################.#\n" + \
#        "#.........#c....#...#...#.....#.........#.....#t..........#.....................#\n" + \
#        "#################################################################################"

# maze = [[s for s in line] for line in maze.split("\n")]

start = [(x, y) for x in range(w) for y in range(h) if maze[y][x] == "@"][0]
maze[start[1]][start[0]] = "."

# def recShortest(maze, start):
#     queue = [(0, start)]
#     seen = set()
#     keys = []
#     while queue:
#         d, at = queue.pop(0)
#         if at not in seen:
#             seen.add(at)
#             if "a" <= maze[at[1]][at[0]] <= "z":
#                 keys.append((maze[at[1]][at[0]], at, d))
#             for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
#                 if maze[at[1] + dy][at[0] + dx] != "#" and not ("A" <= maze[at[1] + dy][at[0] + dx] <= "Z"):
#                     queue.append((d + 1, (at[0] + dx, at[1] + dy)))
#     if keys:
#         best = w * h
#         for key, keyat, keydis in keys:
#             mazeCopy = [[maze[y][x] if maze[y][x] not in [key, key.upper()] else "." for x in range(w)] for y in
#                         range(h)]
#             bestDisRec = recShortest(mazeCopy, keyat)
#             best = min(best, bestDisRec + keydis)
#         return best
#     else:
#         return 0
#
#
# print(recShortest(maze, start))

# queue = [(0, start, ())]
# seen = set()
# while queue:
#     d, at, keys = queue.pop(0)
#     if len(keys) == numKeys:
#         print(d)
#         break
#     if (at, keys) not in seen:
#         seen.add((at, keys))
#         for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
#             if maze[at[1] + dy][at[0] + dx] != "#":
#                 if "A" <= maze[at[1] + dy][at[0] + dx] <= "Z":
#                     if maze[at[1] + dy][at[0] + dx].lower() in keys:
#                         queue.append((d + 1, (at[0] + dx, at[1] + dy), keys))
#                 elif "a" <= maze[at[1] + dy][at[0] + dx] <= "z":
#                     if maze[at[1] + dy][at[0] + dx] in keys:
#                         queue.append((d + 1, (at[0] + dx, at[1] + dy), keys))
#                     else:
#                         newKeys = list(keys)
#                         newKeys.append(maze[at[1] + dy][at[0] + dx])
#                         newKeys = sorted(newKeys)
#                         queue.append((d + 1, (at[0] + dx, at[1] + dy), tuple(newKeys)))
#                 else:
#                     queue.append((d + 1, (at[0] + dx, at[1] + dy), keys))


maze[start[1]][start[0]] = "#"
maze[start[1] + 1][start[0]] = "#"
maze[start[1] - 1][start[0]] = "#"
maze[start[1]][start[0] + 1] = "#"
maze[start[1]][start[0] - 1] = "#"

# import queue
#
# q = queue.Queue()
# q.put((0, (start[0] - 1, start[1] - 1), (start[0] - 1, start[1] + 1), (start[0] + 1, start[1] - 1), (start[0] + 1, start[1] + 1), ()))
# seen = set()
#
# while q:
#     d, at1, at2, at3, at4, keys = q.get()
#     if len(keys) == numKeys:
#         print(d)
#         break
#     if (at1, at2, at3, at4, keys) not in seen:
#         seen.add((at1, at2, at3, at4, keys))
#         for i, at in enumerate([at1, at2, at3, at4]):
#             for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
#                 keys2 = keys
#                 if maze[at[1] + dy][at[0] + dx] != "#":
#                     if "A" <= maze[at[1] + dy][at[0] + dx] <= "Z":
#                         if maze[at[1] + dy][at[0] + dx].lower() in keys:
#                             keys2 = keys
#                         else:
#                             keys2 = ("-1",)
#                     elif "a" <= maze[at[1] + dy][at[0] + dx] <= "z":
#                         if maze[at[1] + dy][at[0] + dx] in keys:
#                             keys2 = keys
#                         else:
#                             newKeys = list(keys)
#                             newKeys.append(maze[at[1] + dy][at[0] + dx])
#                             newKeys = sorted(newKeys)
#                             keys2 = tuple(newKeys)
#                     else:
#                         keys2 = keys
#                 else:
#                     keys2 = ("-1",)
#
#                 if keys2 != ("-1",):
#                     if i == 0:
#                         q.put((d + 1, (at1[0] + dx, at1[1] + dy), at2, at3, at4, keys2))
#                     elif i == 1:
#                         q.put((d + 1, at1, (at2[0] + dx, at2[1] + dy), at3, at4, keys2))
#                     elif i == 2:
#                         q.put((d + 1, at1, at2, (at3[0] + dx, at3[1] + dy), at4, keys2))
#                     elif i == 3:
#                         q.put((d + 1, at1, at2, at3, (at4[0] + dx, at4[1] + dy), keys2))

# areaToRegion = {
#     (True, True): 0,
#     (True, False): 1,
#     (False, True): 2,
#     (False, False): 3
# }
# region = {}
#
# for x in range(w):
#     for y in range(h):
#         if "A" <= maze[y][x] <= "Z":
#             region[maze[y][x].lower()] = areaToRegion[(x < start[0], y < start[1])]
#
# print(region)

import queue

q = queue.Queue()
q.put((0, 0, (start[0] - 1, start[1] - 1), (start[0] - 1, start[1] + 1), (start[0] + 1, start[1] - 1), (start[0] + 1, start[1] + 1), ()))
q.put((0, 1, (start[0] - 1, start[1] - 1), (start[0] - 1, start[1] + 1), (start[0] + 1, start[1] - 1), (start[0] + 1, start[1] + 1), ()))
q.put((0, 2, (start[0] - 1, start[1] - 1), (start[0] - 1, start[1] + 1), (start[0] + 1, start[1] - 1), (start[0] + 1, start[1] + 1), ()))
q.put((0, 3, (start[0] - 1, start[1] - 1), (start[0] - 1, start[1] + 1), (start[0] + 1, start[1] - 1), (start[0] + 1, start[1] + 1), ()))
seen = set()

c = 0

while not q.empty():
    c += 1
    if c % 10000 == 0:
        print(q.qsize())
    d, work, at1, at2, at3, at4, keys = q.get()
    if len(keys) == numKeys:
        print(d)
        break
    if (work, at1, at2, at3, at4, keys) not in seen:
        seen.add((work, at1, at2, at3, at4, keys))
        
        at = [at1, at2, at3, at4][work]
        # activate = -1
        
        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
            keys2 = keys
            if maze[at[1] + dy][at[0] + dx] != "#":
                if "A" <= maze[at[1] + dy][at[0] + dx] <= "Z":
                    if maze[at[1] + dy][at[0] + dx].lower() in keys:
                        keys2 = keys
                    else:
                        keys2 = ("-1",)
                elif "a" <= maze[at[1] + dy][at[0] + dx] <= "z":
                    if maze[at[1] + dy][at[0] + dx] in keys:
                        keys2 = keys
                    else:
                        newKeys = list(keys)
                        newKeys.append(maze[at[1] + dy][at[0] + dx])
                        newKeys = sorted(newKeys)
                        keys2 = tuple(newKeys)
                        # if maze[at[1] + dy][at[0] + dx].lower() in region:
                        #     activate = region[maze[at[1] + dy][at[0] + dx].lower()]
                else:
                    keys2 = keys
            else:
                keys2 = ("-1",)

            if keys2 != ("-1",):
                if work == 0:
                    data = [d + 1, work, (at1[0] + dx, at1[1] + dy), at2, at3, at4, keys2]
                elif work == 1:
                    data = [d + 1, work, at1, (at2[0] + dx, at2[1] + dy), at3, at4, keys2]
                elif work == 2:
                    data = [d + 1, work, at1, at2, (at3[0] + dx, at3[1] + dy), at4, keys2]
                elif work == 3:
                    data = [d + 1, work, at1, at2, at3, (at4[0] + dx, at4[1] + dy), keys2]
                
                
                if keys != keys2:
                    for i in range(4):
                        data[1] = i
                        q.put(tuple(data))
                else:
                    q.put(tuple(data))
                
                # if activate != -1 and activate != work:
                #     if activate == 0:
                #         q.put((d + 1, activate, (at1[0] + dx, at1[1] + dy), at2, at3, at4, keys2))
                #     elif activate == 1:
                #         q.put((d + 1, activate, at1, (at2[0] + dx, at2[1] + dy), at3, at4, keys2))
                #     elif activate == 2:
                #         q.put((d + 1, activate, at1, at2, (at3[0] + dx, at3[1] + dy), at4, keys2))
                #     elif activate == 3:
                #         q.put((d + 1, activate, at1, at2, at3, (at4[0] + dx, at4[1] + dy), keys2))
